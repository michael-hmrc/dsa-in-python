

# Insertion sort unit tests generated by Mako

# tests/test_insertion_sort.py

from exercises.insertion_sort import insertion_sort

# Write your tests using pytest framework

# Basic test case
def test_insertion_sort_basic():
    arr = [4, 2, 1, 3]
    insertion_sort(arr)
    assert arr == [1, 2, 3, 4], "Basic test case failed"


# Test case with duplicate elements
def test_insertion_sort_duplicates():
    arr = [4, 2, 1, 4, 3, 1]
    insertion_sort(arr)
    assert arr == [1, 1, 2, 3, 4, 4], "Test case with duplicates failed"


# Test case with negative numbers
def test_insertion_sort_negative():
    arr = [-4, 2, -1, 0, 3, -2]
    insertion_sort(arr)
    assert arr == [-4, -2, -1, 0, 2, 3], "Test case with negative numbers failed"


# Test case with already sorted list
def test_insertion_sort_sorted():
    arr = [1, 2, 3, 4, 5]
    insertion_sort(arr)
    assert arr == [1, 2, 3, 4, 5], "Test case with already sorted list failed"


# Test case with empty list
def test_insertion_sort_empty():
    arr = []
    insertion_sort(arr)
    assert arr == [], "Test case with empty list failed"


# Test case with single element
def test_insertion_sort_single_element():
    arr = [1]
    insertion_sort(arr)
    assert arr == [1], "Test case with single element failed"


# Test case with large numbers
def test_insertion_sort_large_numbers():
    arr = [1000, 10000, 100, 100000, 10]
    insertion_sort(arr)
    assert arr == [10, 100, 1000, 10000, 100000], "Test case with large numbers failed"


# Test case with floating-point numbers
def test_insertion_sort_floats():
    arr = [3.4, 2.1, 1.5, 4.2, 0.9]
    insertion_sort(arr)
    assert arr == [0.9, 1.5, 2.1, 3.4, 4.2], "Test case with floating-point numbers failed"


# # Test case with strings (should not modify order)
# def test_insertion_sort_strings():
#     arr = ['apple', 'orange', 'banana', 'grape']
#     insertion_sort(arr)
#     assert arr == ['apple', 'orange', 'banana', 'grape'], "Test case with strings failed"
#

# Test case with None (should raise TypeError)
def test_insertion_sort_none():
    arr = None
    try:
        insertion_sort(arr)
        assert False, "Expected TypeError for None input"
    except TypeError:
        assert True, "Test case with None failed to raise TypeError"

